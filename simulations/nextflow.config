/*
 * Global workflow default parameters, set as params.<parameter>
 */
params {
    N_sims = 300
    type = "general" // "test"
}

if (params.type == "test") {
    params.N_sims = 100
}

/*
 * Resources for the processes (low enough such that JURA and local can have the same)
 */
process {
    withName: sim_scenarios {
        executor = "local"
    }

    withName: describe_mediators {
        cpus = 1
        memory = 10.GB
        time = 30.min
    }

    withName: sim_generator {
        errorStrategy = "retry"
        maxRetries = 2
        cpus = 1
        memory = { 5.GB + 5.GB * (task.attempt - 1) }
        time = { 1.h + 2.h * (task.attempt - 1) }
    }

    withName: simulate {
        errorStrategy = "retry"
        maxRetries = 2
        cpus = 1
        memory = { 5.GB + 5.GB * (task.attempt - 1) }
        time = { 1.h + 2.h * (task.attempt - 1) }
    }
}

/*
 * Profile definitions
 */
profiles {
    standard {
        process.executor = "local"
    }

    local_conda {
        process.conda = "/opt/miniconda3/envs/ML_mediated" // And not e.g. environment.yml, to ensure aarch64
        conda.enabled = true
    }

    local_docker {
        docker.enabled = true
        process.container = "simulations"
    }

    urblauna {
        process.executor = "slurm"
        process.container = "/users/klepik/software/project_dependencies/ML_mediated/simulations/ML_mediated_simulations.sif"
        singularity.enabled = true
        singularity.autoMounts = true
        executor.queueSize = 200
        executor.submitRateLimit = 1
    }

    long {
        process {
            withName: sim_generator {
                errorStrategy = "terminate"
                memory = 15.GB
                time = 24.h
            }

            withName: simulate {
                errorStrategy = "terminate"
                memory = 15.GB
                time = 24.h
            }
        }
    }
}

/*
 * Tracing and visualisation (https://github.com/nextflow-io/nextflow/issues/3186)
 */
 def timestamp = new java.util.Date().format( 'yyyyMMdd_HHmmss')
timeline {
    enabled = true
    file = "tracing/timeline_${params.type}_${timestamp}.html"
}

report {
    enabled = true
    file = "tracing/report_${params.type}_${timestamp}.html"
}

trace {
    enabled = true
    file = "tracing/trace_${params.type}_${timestamp}.txt"
}

dag {
    enabled = true
    file = "tracing/dag_${params.type}_${timestamp}.svg"
}
